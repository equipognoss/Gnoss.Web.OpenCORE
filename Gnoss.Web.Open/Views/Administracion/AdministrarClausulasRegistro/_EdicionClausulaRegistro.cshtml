@model ManageRegisterClausesViewModel.RegisterClauseModel


@*
Descripción
-----------------------------------------------
Vista parcial que se utiliza para mostrar los detalles de una determinada cláusula de registro/legal.

Variables
----------------------------------------------------------------
*@

@{
    // Cabecera para obtención de idiomas de la Comunidad
    HeaderModel cabecera = Html.GetCabecera();
	string idModalPage = "modal-configuracion-clausula_" + Model.Key;	
	string idModalPageDelete = "modal-configuracion-clausula_delete" + Model.Key;    
    // Diccionario del contenido de la cláusula (En varios idiomas)    
    Dictionary<string, string> clausulaDescriptionDictionary = new Dictionary<string, string>();    
    // Idioma por defecto de la comunidad
    string idiomaPorDefecto = ViewBag.IdiomaPorDefecto;
}

@* Obtener el nombre del tipo de cláusula *@
@{
    string nombreTipoClausula = Model.Type.ToString();
    switch (Model.Type)
    {
        case ManageRegisterClausesViewModel.ClauseType.CondicionesUso:
            nombreTipoClausula = Html.GetText("COMADMINCLAUSULASREGISTRO", "TIPOCONDICIONESUSO");
            break;
        case ManageRegisterClausesViewModel.ClauseType.ClausulasTexo:
            nombreTipoClausula = Html.GetText("COMADMINCLAUSULASREGISTRO", "TIPOPOLITICAPRIVACIDAD");
            break;
        case ManageRegisterClausesViewModel.ClauseType.PoliticaCookiesUrlPagina:
            nombreTipoClausula = Html.GetText("COMADMINCLAUSULASREGISTRO", "TIPOPOLITICACOOKIES");
            break;
        case ManageRegisterClausesViewModel.ClauseType.Opcional:
            nombreTipoClausula = Html.GetText("COMADMINCLAUSULASREGISTRO", "TIPOCLAUSULAOPCIONAL");
            break;
    }
}

@* Construir los diferentes items en idiomas (Nombre Cláusula y Descripción de la cláusula) *@
@{
	// Obtener descripción/contenido de la cláusula en formato diccionario con los multiIdiomas para ser mostrados en la row de la cláusula
    clausulaDescriptionDictionary = Html.GetDictionaryValuesFromMultiLanguageItem(Model.Text1);		
}

@* Contenedor de la cláusula *@
<li id="@Model.Key" class="component-wrap clausula-row">
    <div class="component" data-id="@Model.Key">
        <div class="component-header-wrap">
            <div class="component-header">
                <div class="component-sortable js-component-sortable-clause">
                    <span class="material-icons-outlined sortable-icon">drag_handle</span>
                </div>
                <div class="component-header-content">
                    <div class="component-header-left">
                        <div class="component-name-wrap">
                            @* Nombre de la clausula *@                              
                            <span class="component-name">																									    								    									
                                @nombreTipoClausula
						    </span>
                        </div>
                        <div class="component-contenido-wrap">
                            @* Contenido / Descripción de la cláusula *@
							@* Recorrer los idiomas existentes y crear los datos para Descripción de la cláusula *@
							@foreach (KeyValuePair<string, string> idioma in cabecera.Languajes)
								{																												
								<span class="language-component component-contenido @( idiomaPorDefecto == idioma.Key ? " " : "d-none")" data-languageitem="@idioma.Key">																	
									@* Asegurarnos de que haya valor en el dictionary. Si no, dejarlo en blanco *@																										
									@{
										string value = "";
										if (clausulaDescriptionDictionary.TryGetValue(idioma.Key, out value))
										{
                                            @* Html.CleanHtmlParagraphsStringHtml(@value);*@
                                            var valueFormatted = Html.CleanHtmlParagraphsStringHtml(value);
                                            valueFormatted = Html.CleanHtmlFromMultimediaItems(valueFormatted);
                                            valueFormatted = UtilCadenas.HtmlDecode(valueFormatted);
                                            @valueFormatted;
                                           @* @value *@
										}										
									}
								</span>
							}
                        </div>                        
                        <div class="component-fecha-wrap">
                            @* Fecha de creación / Actualización de la cláusula *@
                            @if (Model.DateCreation == Model.DateModification && Model.DateModification.ToShortDateString().Equals("01/01/0001"))
                            {
                                <span class="component-fecha">01/01/2022</span>
                            }
                            else if (Model.DateCreation < Model.DateModification)
                            {
                                <span class="component-fecha">@Model.DateModification.ToShortDateString() </span>
                            }
                            else
                            {
                                <span class="component-fecha">@Model.DateCreation.ToShortDateString() </span>
                            }
                        </div>
                    </div>
                    @* Acciones de la cláusula *@
                    <div class="component-header-right">
                        <div class="component-actions-wrap">
                            <ul class="no-list-style component-actions">
                                @* Editar la cláusula *@
                                <li>
                                    <a class="action-edit round-icon-button js-action-edit-component btnEditClausula"
                                       href="javascript: void(0)"
                                        data-target="#@(idModalPage)" 
                                        data-toggle="modal">
                                        <span class="material-icons">edit</span>
                                    </a>
                                </li>
                                @* Eliminar la cláusula *@
                                <li>
                                    <a class="action-delete round-icon-button js-action-delete btnDeleteClausula" 
                                       href="javascript: void(0)"
                                       data-target="#@(idModalPageDelete)" 
                                       data-toggle="modal">
                                        <span class="material-icons">delete</span>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Carga del modal para edición de la cláusula *@
    @Html.PartialView("_modal-views/_clause-detail-item", Model)

</li>