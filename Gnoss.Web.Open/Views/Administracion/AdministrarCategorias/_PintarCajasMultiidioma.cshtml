@model PintarComboAdministrarCategorias

@*
Descripción
-----------------------------------------------
Minivista para pintar los input type text de multidioma de una categoría.

Variables
----------------------------------------------------------------
*@
@{
    Dictionary<string, string> nombreCategoria = Model.Categoria.Value;
    HeaderModel cabecera = Html.GetCabecera();
    // Contador del nº de pestañas listadas
    int contNumPestañasVisibles = 0;
}
@*
 ----------------------------------------------------------------
 -------------------- Minivista para pintar inputs de multiIdioma de una categoría --------------------
*@


@{
    @* Comprobar si se permite multiIdioma *@
    if (Model.MultiLanguaje)
    {

        @* Pinta los tabs *@
        <ul class="nav nav-tabs" id="tabIdiomasCajasMultiIdioma" role="tablist">
		@* Títulos de Tabs con los diferentes idiomas a visualizar de categorías. De momento ignoro el dropdown *@
			@foreach (KeyValuePair<string, string> idioma in cabecera.Languajes){
                <li class="nav-item" role="presentation">
			    	<a  class="tabIdiomaCajaMultiIdiomaItem nav-link @( Model.IdiomaTesauro == idioma.Key ? "active" : null)"                                                         
			    	    id="@("cajaMultiIdioma_" + idioma.Key)" 
                        data-toggle="tab" 
                        href="#@("ver_cajaMultiIdioma_" + idioma.Key)" 							
			    		role="tab" 
                        aria-controls="@("ver_cajaMultiIdioma_" + idioma.Key)"
                        aria-selected="@(contNumPestañasVisibles == 0 ? "true" : "false")">@idioma.Value</a>
			    </li>
                contNumPestañasVisibles += 1;
            }
	    </ul>

        @* Contenido de los Tabs*@
        <div class="tab-content pb-0" id="nav-tabContentIdiomasCajasMultiIdioma">
            @foreach (KeyValuePair<string, string> idioma in cabecera.Languajes)
            {
                string textoCaja = "";
                if (nombreCategoria != null && nombreCategoria.ContainsKey(idioma.Key))
                {
                    textoCaja = nombreCategoria[idioma.Key];
                }
                @* Cada panel con el idioma correspondiente *@ 
                <div id="@("ver_cajaMultiIdioma_" + idioma.Key)" 
                      class="tab-pane fade @( Model.IdiomaTesauro == idioma.Key ? "active show" : null)"
                      role="tabpanel"
                      aria-labelledby="@("ver_cajaMultiIdioma_" + idioma.Key)">     

                      @* Input para el nombre de la categoría *@ 
                        <div class="form-group mb-4">
			                <label class="control-label d-block">@Html.GetText("ADMINISTRACIONBASICA","NOMBRE")</label>
			                <input type="text"                     
                                   id="@("txtNombreCat" + idioma.Key)"
                                   rel="@idioma.Key" 
                                   placeholder="@Html.GetText("DEVTOOLS","INTRODUCEELTITULODELACATEGORIA")"
                                   class="form-control inputIdioma"
                                   @Html.Raw(!string.IsNullOrEmpty(textoCaja) ? "value=\"" + textoCaja + "\"" : "")>
		                </div>                    
                </div>
            }
        </div>
    }
    else
    {             
        KeyValuePair<string, string>
            idiomaUnico = new KeyValuePair<string, string>
                ("es", "español");
        string textoCaja = "";
        if (nombreCategoria != null && nombreCategoria.ContainsKey(idiomaUnico.Key))
        {
            textoCaja = nombreCategoria[idiomaUnico.Key];
        }

        @* Input para el nombre de la categoría *@
        <div class="form-group mb-4">
		    <label class="control-label d-block">@Html.GetText("ADMINISTRACIONBASICA","NOMBRE")</label>
		    <input type="text"                     
                   id="@("txtNombreCat" + idiomaUnico.Key)"
                   rel="@idiomaUnico.Key"
                   placeholder="@Html.GetText("DEVTOOLS","INTRODUCEELTITULODELACATEGORIA")"
                   class="form-control inputIdioma"
                   @Html.Raw(!string.IsNullOrEmpty(textoCaja) ? "value=\"" + textoCaja + "\"" : "")>
		</div>

    }
}