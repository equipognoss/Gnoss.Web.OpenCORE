@model FlujoViewModel

@{
    string diagramaFlujo = "flowchart LR\n";
    string seccionCallback = "";
    @foreach (EstadoViewModel estado in Model.Estados.OrderBy(e => e.TipoEstado).ThenBy(e => e.Nombre))
    {
        var resultadoPersonas = PintarPersonas(estado.ListaEstadoIdentidad);
        var resultadoGrupos = PintarGrupos(estado.ListaEstadoGrupo);
        string titulo = $"<h4 class='card-subtitle mb-2 text-muted'>{Html.GetText("BLOGS", "EDITORES")}</h4>";
        string resultado = titulo + "<div class='mb-3'>" + resultadoPersonas.Item1 + resultadoGrupos.Item1 + "</div>";

        if (!estado.Publico)
        {
            titulo = $"<h4 class='card-subtitle mb-2 text-muted'>{Html.GetText("USUARIOS", "LECTORES")}</h4>";
            resultado += titulo + "<div class='mb-3'>" + resultadoPersonas.Item2 + resultadoGrupos.Item2 + "</div>";
        }
        seccionCallback += $"click {estado.EstadoID} call handlePopOverNode(\"{estado.EstadoID}\",\"{resultado}\")\n";
    }

    string seccionEstilos = "";
    string seccionRelaciones = "";
    string htmlResponsables = "";
    foreach (var transicion in Model.Transiciones.OrderBy(t => t.EstadoOrigen.TipoEstado).ToList())
    {
        htmlResponsables += $"<div id='{transicion.TransicionID}'>" + PintarPersonasGruposTransicion(transicion.ListaNombreTransicionIdentidad, transicion.ListaNombreTransicionGrupo) + "</div>";
        Guid estadoOrigenID = transicion.EstadoOrigen.EstadoID;
        string nombreEstadoOrigen = Html.ObtenerTextoIdiomaUsuario(Model.Estados.Where(e => e.EstadoID.Equals(estadoOrigenID)).Select(e => e.Nombre).FirstOrDefault());
        Guid estadoDestinoID = transicion.EstadoDestino.EstadoID;
        string nombreEstadoDestino = Html.ObtenerTextoIdiomaUsuario(Model.Estados.Where(e => e.EstadoID.Equals(estadoDestinoID)).Select(e => e.Nombre).FirstOrDefault());
        string nombreTransicion = Html.ObtenerTextoDeIdioma(transicion.Nombre);

        if (!seccionEstilos.Contains(estadoOrigenID.ToString()))
        {
            string colorOrigen = transicion.EstadoOrigen.Color;
            if (string.IsNullOrEmpty(colorOrigen))
            {
                colorOrigen = transicion.EstadoOrigen.TipoEstado.Equals(TipoEstado.Inicial) ? "#80C8F7" : transicion.EstadoOrigen.TipoEstado.Equals(TipoEstado.Intermedio) ? "#FFB74D" : "#94c748";
            }
            seccionEstilos += $"style {estadoOrigenID} fill:{colorOrigen}\n";
        }
        if (!seccionEstilos.Contains(estadoDestinoID.ToString()))
        {
            string colorDestino = transicion.EstadoDestino.Color;
            if (string.IsNullOrEmpty(colorDestino))
            {
                colorDestino = transicion.EstadoDestino.TipoEstado.Equals(TipoEstado.Inicial) ? "#80C8F7" : transicion.EstadoDestino.TipoEstado.Equals(TipoEstado.Intermedio) ? "#FFB74D" : "#94c748";
            }
            seccionEstilos += $"style {estadoDestinoID} fill:{colorDestino}\n";
        }

        string direccion = "-->";

        seccionRelaciones += $"{estadoOrigenID}[\"{nombreEstadoOrigen}\"] {transicion.TransicionID}@{direccion} |{nombreTransicion}| {estadoDestinoID}[\"{nombreEstadoDestino}\"]\n";
    }
    diagramaFlujo += seccionEstilos + seccionRelaciones + seccionCallback;
}

<div class="modal-header">
    <p class="modal-title">
        <span class="material-icons">edit</span>
        @Html.ObtenerTextoIdiomaUsuario(Model.Nombre)
    </p>
    <span class="material-icons cerrar" data-dismiss="modal" aria-label="Close">close</span>
</div>
<div class="modal-body">
    <div class="d-none mermaid-container p-5" align="center">
        @Html.Raw(diagramaFlujo)
    </div>
</div>
@functions {
    public string PintarPersonasGruposTransicion(Dictionary<Guid, string> pListaNombresIdentidad, Dictionary<Guid, string> pListaNombresGrupo)
    {
        string titulo = $"<h4 class='card-subtitle mb-2 text-muted'>{Html.GetText("DEVTOOLS", "RESPONSABLES")}</h4>";
        string resultado = "<div class='mb-3'>";
        foreach (Guid transicionIdentidadID in pListaNombresIdentidad.Keys)
        {
            resultado += PintarTags(pListaNombresIdentidad[transicionIdentidadID], transicionIdentidadID, false);
        }

        foreach (Guid transicionGrupoID in pListaNombresGrupo.Keys)
        {
            resultado += PintarTags(pListaNombresGrupo[transicionGrupoID], transicionGrupoID, true);
        }
        resultado += "</div>";
        resultado = titulo + resultado;
        return resultado;
    }
    public (string, string) PintarPersonas(List<EstadoIdentidadViewModel> pEstadoIdentidad)
    {
        string htmlEditores = "";
        string htmlLectores = "";
        foreach (EstadoIdentidadViewModel estadoIdentidad in pEstadoIdentidad)
        {
            if (estadoIdentidad.Editor)
            {
                htmlEditores += PintarTags(estadoIdentidad.Nombre, estadoIdentidad.PerfilID, false);
            }
            else
            {
                htmlLectores += PintarTags(estadoIdentidad.Nombre, estadoIdentidad.PerfilID, false);
            }
        }
        return (htmlEditores, htmlLectores);
    }
    public (string, string) PintarGrupos(List<EstadoGrupoViewModel> pEstadoGrupo)
    {
        string htmlEditores = "";
        string htmlLectores = ""; ;
        foreach (EstadoGrupoViewModel estadoGrupo in pEstadoGrupo)
        {
            if (estadoGrupo.Editor)
            {
                htmlEditores += PintarTags(estadoGrupo.Nombre, estadoGrupo.GrupoID, true);
            }
            else
            {
                htmlLectores += PintarTags(estadoGrupo.Nombre, estadoGrupo.GrupoID, true);
            }
        }
        return (htmlEditores, htmlLectores);
    }
    public string PintarTags(string pNombre, Guid pIdentidadID, bool pGrupo)
    {
        string resultado = "";
        string grupo = pGrupo ? $"[{Html.GetText("CONTACTOS", "GRUPO")}]" : "";
        resultado += $"<span class='list-group-item' data-grupo='{pGrupo}' data-id='{pIdentidadID}'>{pNombre} {grupo}</span>";
        return resultado;
    }
}

<script type="text/javascript">
    (function ($) {
        operativaGestionFlujos.transitionsResponsiblesHTML = "@Html.Raw(htmlResponsables)"
    })();

</script>
