@model CookieModel
@using Es.Riam.Gnoss.AD.EntityModel.Models.Cookies;

@*
Descripción
-----------------------------------------------
Vista que muestra en detalle la información de la cookie. Adicionalmente, aquí se pintará el modal que se utilizará para su edición/creación.


Variables
----------------------------------------------------------------
*@

@{
// Cookie a revisar
ProyectoCookie cookie = Model.ProyectoCookie;
// Cabecera para obtención de idiomas de la Comunidad
HeaderModel cabecera = Html.GetCabecera();
string idModalCookie = "modal-configuracion-cookie_" + cookie.CookieID;	
string idModalCookieDelete = "modal-configuracion-cookie_delete" + cookie.CookieID;    
// Diccionario del contenido de la cláusula (En varios idiomas)    
Dictionary<string, string> cookieNameDictionary = new Dictionary<string, string>();    
// Idioma por defecto de la comunidad
string idiomaPorDefecto = ViewBag.IdiomaPorDefecto;
// Nombre del tipo de cookie
string tipoCookie = Html.ObtenerTextoIdiomaUsuario(Model.ListaCategoriaProyectoCookie.Where(item => item.CategoriaID.Equals(cookie.CategoriaID)).Select(item => item.Nombre).FirstOrDefault(), true);
}

@* Construir los diferentes items en idiomas (Nombre, Descripción de la cookie) *@
@{
	// Obtener descripción/contenido de la cláusula en formato diccionario con los multiIdiomas para ser mostrados en la row de la cláusula
    cookieNameDictionary = Html.GetDictionaryValuesFromMultiLanguageItem(cookie.Nombre);		
}

@* Contenedor de la cookie *@
<li class="component-wrap cookie-row" id="@cookie.CookieID">
	<div class="component" data-id="@cookie.CookieID">
		<div class="component-header-wrap">
			<div class="component-header">
                @* Icono para arrastrar y mover la cookie *@
				<div class="component-sortable js-component-sortable-cookie">
					<span class="material-icons-outlined sortable-icon">drag_handle</span>
				</div>                
				<div class="component-header-content">
					<div class="component-header-left">
                        @* Nombre, tipo de cookie *@
						<div class="component-name-wrap">
							@if (cookieNameDictionary.Count == 0)
							{
								<span class="language-component component-contenido @(idiomaPorDefecto)" data-languageitem="@idiomaPorDefecto">																																																			
									@cookie.Nombre
								</span>
							}
							else
							{							
								foreach (KeyValuePair<string, string> idioma in cabecera.Languajes)
								{																												
									<span class="language-component component-contenido @( idiomaPorDefecto == idioma.Key ? " " : "d-none")" data-languageitem="@idioma.Key">																	
										@* Asegurarnos de que haya valor en el dictionary. Si no, dejarlo en blanco *@																										
										@{
											string value = "";
											if (cookieNameDictionary.TryGetValue(idioma.Key, out value))
											{                                           
											   @value
											}										
										}
									</span>
								}
							}
						</div>
                        @* Grupo de la cookie (Redes sociales, ...) *@
						<div class="component-tipo-wrap">
							<span class="component-tipo">@tipoCookie</span>
						</div>
                        @* Fecha creación / actualización de cookie *@
						<div class="component-fecha-wrap">
							@if (cookie.FechaCreacion == cookie.FechaActualizacion && cookie.FechaCreacion.ToShortDateString().Equals("01/01/0001"))
							{
								<span class="component-fecha">01/01/2022</span>
							}
							else if (cookie.FechaCreacion < cookie.FechaActualizacion)
							{
								<span class="component-fecha">@cookie.FechaActualizacion.ToShortDateString() </span>
							}
							else
							{
								<span class="component-fecha">@cookie.FechaCreacion.ToShortDateString() </span>
							}
						</div>
					</div>
                    @* Acciones de la cookie *@
					<div class="component-header-right">
						<div class="component-actions-wrap">
							<div class="dropdown">
								@* Dropdown de acciones en la cookie *@
								<a								
								class="nav-link dropdown-toggle btn btn-outline-grey @( !cookie.EsEditable ? "disabled" : "")"
								data-toggle="dropdown"
								href="#"
								role="button"
								aria-haspopup="true"
								aria-expanded="false">                                    
									<span class="material-icons">create</span>
									<span class="texto">@Html.GetText("COMMON","EDITAR")</span>
								</a>
								@if (cookie.EsEditable)
								{
									<div
										class="dropdown-menu dropdown-menu-left basic-dropdown"
										style="will-change: transform">
										<ul class="no-list-style">
											@* Botón Editar Cookie *@
											<li>
												<a class="item-dropdown js-action-edit-component btnEditCookie"
												   data-target="#@(idModalCookie)"
												   data-toggle="modal">
													<span class="material-icons">create</span>
													<span class="texto">@Html.GetText("COMMON","EDITAR")</span>
												</a>											  
											</li>

											@* Botón Eliminar Cookie *@
											<li>
												<a class="item-dropdown js-action-delete-component btnDeleteCookie"
												   data-target="#@(idModalCookieDelete)" 
												   data-toggle="modal">
													<span class="material-icons">delete</span>
													<span class="texto">@Html.GetText("COMMON","ELIMINAR")</span>
												</a>
											</li>
										</ul>
									</div>
								}
							</div>
						</div>
					</div>					
				</div>
			</div>
		</div>
	</div>

	@* Carga del modal para edición de la cookie. Necesario que los datos se carguen para su guardado *@	
	@Html.PartialView("_modal-views/_cookie-detail-item", Model)	
	
</li>


